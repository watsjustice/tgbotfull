import {Markup, Scenes, } from "telegraf";
import knexfile from "../knexfile.js";
import Knex from "knex";
import {User} from "../entities/user_entity.js";
import {Model} from "objection";

Model.knex(Knex(knexfile.development));
export class SceneGenerator{

	reSendMess(){
		const message = new Scenes.BaseScene('main menu');

		message.enter(async ctx =>{
			
			const user = await User.query().findById(ctx.from.id).returning('*')
			
			if (!user){
				await User.query().insert({
					id : ctx.from.id,
					status : 0,
				})
			}

			if (ctx.session.message_id){
			}else{ 
				ctx.session.message_id = NaN
			}

			if (!ctx.session.message_id){
				const { message_id } = await ctx.replyWithHTML('<b>–ì–ª–∞–≤–æ–µ –º–µ–Ω—é</b>',
					{
				        reply_markup: {
				            one_time_keyboard: true,
				            inline_keyboard: [
				                [
				                	{text:'üí≤–¢–∞—Ä–∏—Ñ—ã',callback_data: 'stages'}],
	                    			[{text:'üïõ–ü–æ–¥–ø–∏—Å–∫–∞',callback_data: 'substatus'}],
	                    			[{text:'‚ùì–í–æ–ø—Ä–æ—Å—ã',callback_data: 'questions'}],
	                    			[{text:'üìå–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ—Ä–≤–∏—Å–µ',callback_data: 'info'}],
				            ]
				        },
				        disable_web_page_preview: true,
				        parse_mode: 'HTML'
	    			})
				ctx.session.message_id = message_id
		
			} else {

				try{
					const { message_id } = await ctx.telegram.editMessageText(
						ctx.chat.id,
		                ctx.session.message_id,
		                0,
						'<b>–ì–ª–∞–≤–æ–µ –º–µ–Ω—é</b>',
							{
						        reply_markup: {
						            one_time_keyboard: true,
						            inline_keyboard: [
						                [
						                	{text:'üí≤–¢–∞—Ä–∏—Ñ—ã',callback_data: 'stages'}],
			                    			[{text:'üïõ–ü–æ–¥–ø–∏—Å–∫–∞',callback_data: 'substatus'}],
			                    			[{text:'‚ùì–í–æ–ø—Ä–æ—Å—ã',callback_data: 'questions'}],
			                    			[{text:'üìå–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ—Ä–≤–∏—Å–µ',callback_data: 'info'}],
						            ]

						        },
						        disable_web_page_preview: true,
						        parse_mode: 'HTML'
			    			})
						ctx.session.message_id = message_id
				

				} catch {

				}
			}
		
		})
			
		return message;
	}


	Stages(){
		const stage = new Scenes.BaseScene('stage');

		stage.enter( async ctx => {


			if (!ctx.session.message_id){
				const { message_id } = await ctx.replyWithHTML(
					'–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–æ–º, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É',
					{
				        reply_markup: {
				            one_time_keyboard: true,
				            inline_keyboard: [
				                [
				                	{text:'‚úÖ1 –º–µ—Å—è—Ü –∑–∞ 1490',callback_data: '1monthsub'}],
	                    			[{text:'‚úÖ3 –º–µ—Å—è—Ü–∞ –∑–∞ 3990',callback_data: '3monthsub'}],
	                    			[{text:'‚úÖ12 –º–µ—Å—è—Ü–µ–≤ –∑–∞ 14990',callback_data: '12monthsub'}],

				            ]
				        },
				        disable_web_page_preview: true,
				        parse_mode: 'HTML'
	    			})

				ctx.session.message_id = message_id 
			} else { 
				const { message_id } = await ctx.telegram.editMessageText(
					ctx.chat.id,
	                ctx.session.message_id,
	                0,
					'–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–æ–º, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É',
					{
				        reply_markup: {
				            one_time_keyboard: true,
				            inline_keyboard: [
				                [
				                	{text:'‚úÖ1 –º–µ—Å—è—Ü –∑–∞ 1490',callback_data: '1monthsub'}],
	                    			[{text:'‚úÖ3 –º–µ—Å—è—Ü–∞ –∑–∞ 3990',callback_data: '3monthsub'}],
	                    			[{text:'‚úÖ12 –º–µ—Å—è—Ü–µ–≤ –∑–∞ 14990',callback_data: '12monthsub'}],

				            ]
				        },
				        disable_web_page_preview: true,
				        parse_mode: 'HTML'
	    			})

				ctx.session.message_id = message_id 

			}
		})

		return stage;
	}


	subPayment(){
		const payment = new Scenes.BaseScene('subpay');

		payment.enter( async ctx => {

			let text;
			switch (ctx.session.thesub){
				case 1:
					text = '–¢–∞—Ä–∏—Ñ: üîê 1 –º–µ—Å—è—Ü –∑–∞ 1490‚ÇΩ üéüÔ∏è'+ '\n' +
										'–°—Ç–æ–∏–º–æ—Å—Ç—å: 10.00 üá∑üá∫RUB' + '\n'+
										'–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 31 –¥–Ω–µ–π'
					break;

				case 2:
					text = '–¢–∞—Ä–∏—Ñ: üîê 3 –º–µ—Å—è—Ü –∑–∞ 3990‚ÇΩ üéüÔ∏è'+ '\n' +
										'–°—Ç–æ–∏–º–æ—Å—Ç—å: 10.00 üá∑üá∫RUB' + '\n'+
										'–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 31 –¥–Ω–µ–π'
					break;

				case 3:
					text = '–¢–∞—Ä–∏—Ñ: üîê 12 –º–µ—Å—è—Ütd –∑–∞ 14490‚ÇΩ üéüÔ∏è'+ '\n' +
										'–°—Ç–æ–∏–º–æ—Å—Ç—å: 10.00 üá∑üá∫RUB' + '\n'+
										'–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 31 –¥–Ω–µ–π'
					break;


			}

			if (!ctx.session.message_id){
				const { message_id } = await ctx.replyWithHTML(
					text,
					{
				        reply_markup: {
								one_time_keyboard: true,
								inline_keyboard: [
									[
									    {text:'üíµ–û–ø–ª–∞—Ç–∏—Ç—å',callback_data: 'paymentinfo'}],
								    ]
						},
				        disable_web_page_preview: true,
				        parse_mode: 'HTML'
	    			})

				ctx.session.message_id = message_id
			} else {
				const { message_id } = await ctx.telegram.editMessageText(
					ctx.chat.id,
	                ctx.session.message_id,
	                0,
					text,
					{
				        reply_markup: {
								one_time_keyboard: true,
								inline_keyboard: [
									[
									    {text:'üíµ–û–ø–ª–∞—Ç–∏—Ç—å',callback_data: 'paymentinfo'}],
								    ]
						},
				        disable_web_page_preview: true,
				        parse_mode: 'HTML'
	    			})

				ctx.session.message_id = message_id

			} 

									
		})

		return payment;


	}

	paymentInfo(){
		const info = new Scenes.BaseScene('payinfo');

		info.enter(async ctx => {

			let text = '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –¢–∏–Ω—å–∫–æ—Ñ—Ñ/–°–±–µ—Ä/–ê–ª—å—Ñ–∞' + '\n' +
						'–ö –æ–ø–ª–∞—Ç–µ: 10.00 üá∑üá∫RUB' + '\n' +
						`–í–∞—à ID: ${ctx.chat.id}` + '\n' + 
						'–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:' + '\n\n' +
						'‚ö†Ô∏è–ü–µ—Ä–µ–≤–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ—É –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª–∏:' + '\n' +
						'üíö1 –º–µ—Å—è—Ü - 1.490' + '\n' + 
						'üíö3 –º–µ—Å—è—Ü–∞ - 3.990' + '\n' +
						'üíö1 –≥–æ–¥ - 14.990' + '\n' +
						'----------------------------------' + '\n' +
						'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:' + '\n' +
						'üí≥4890494776467862(ü•ùQIWI) ‚úÖ' + '\n' +
						'----------------------------------' + '\n' +
						'–ü–ï–†–ï–í–û–î –ù–ê –°–ë–ï–† –∏ –¢–ò–ù–¨–ö–û–§–§ –î–û–°–¢–£–ü–ï–ù –¢–û–õ–¨–ö–û –î–õ–Ø –°–¢–ê–†–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô' + '\n' +
						'(‚ùó–ö–¢–û –†–ê–ù–ï–ï  –ë–†–ê–õ –ü–û–î–ü–ò–°–ö–£‚ùó)' + '\n' +
						'----------------------------------' + '\n' +
						'‚ö†Ô∏è–í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ —Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–æ–º ‚ö†Ô∏è' + '\n' +
						'üîê–û–ø–ª–∞—Ç–∏–≤ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —á–µ–∫ –±–æ—Ç—É. ' + '\n' +
						'–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º:' + '\n\n' +
						'‚òéÔ∏è @KO_PRIORITYHELPER_BOT' + '\n' +
						'__________________________' + '\n'




			const { message_id } = await ctx.telegram.editMessageText(
				ctx.chat.id,
                ctx.session.message_id,
                0,
				text,
				{
			        reply_markup: {
							one_time_keyboard: true,
							inline_keyboard: [
								[
								    {text:'‚úÖ–Ø –æ–ø–ª–∞—Ç–∏–ª',callback_data: 'accesspayment'}],
							    ]
					},
			        disable_web_page_preview: true,
			        parse_mode: 'HTML'
    			})

			ctx.session.message_id = message_id
			
		})
		return info;
	}

	AccessPayment(){
		const access = new Scenes.BaseScene('accesspayment');
		let text;

		access.enter(async ctx =>{
			let text =  'üíÅüèª‚Äç‚ôÇÔ∏è <b>–û–ø–ª–∞—Ç–∏–ª–∏?</b>' + '\n\n' +
						'üëåüèª –¢–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π (–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º!) –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –ø–ª–∞—Ç–µ–∂–∞: —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.' + '\n\n' +
						'–ù–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã: –¥–∞—Ç–∞, –≤—Ä–µ–º—è –∏ —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞.' + '\n' +
						'__________________________' + '\n' +
						'<b>–ó–∞ —Å–ø–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>'

			const { message_id } = await ctx.telegram.editMessageText(
					ctx.chat.id,
	                ctx.session.message_id,
	                0,
					text,
					{
				        reply_markup: {
								one_time_keyboard: true,
								inline_keyboard: [
									[
									    {text:'‚ùå–û—Ç–º–µ–Ω–∞',callback_data: 'main menu'}],
								    ]
						},
				        disable_web_page_preview: true,
				        parse_mode: 'HTML'
	    			})

				ctx.session.message_id = message_id
				
			})

		access.on('photo', async ctx => {
			await ctx.telegram.sendPhoto(
	            1177303799,
	            ctx.message.photo[ctx.message.photo.length - 1].file_id,
	            { caption : `${ctx.chat.id}\n${ctx.session.subduration} `}
            )

			await ctx.telegram.deleteMessage(ctx.chat.id, ctx.session.message_id)

			let text = '‚úÖ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!' + '\n\n' +
				   '–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –ø–ª–∞—Ç—ë–∂ - —É –í–∞—Å –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞! –û–∂–∏–¥–∞–π—Ç–µ ;)'
			await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id)

			const { message_id } = await ctx.replyWithHTML(
				text,
				{
			        reply_markup: {
							one_time_keyboard: true,
							inline_keyboard: [
								[
								    {text:'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',callback_data: 'main menu'}],
							    ]
					},
			        disable_web_page_preview: true,
			        parse_mode: 'HTML'
    			})

			ctx.session.message_id = message_id

		})


		return access;

	}

	subStatus(){
		const sub = new Scenes.BaseScene('substatus');
		let status = [0]
		sub.enter(async ctx => {
			try{
				let user = fs.readFileSync('userdata.json')
				let status = JSON.parse(user)
			} catch {
			}
			let text = '';

			if (Object.values(...status).includes(`${ctx.chat.id}`)){
				text = '‚úÖ–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞'

			} else {
				text =  '‚åõÔ∏è –£ –í–∞—Å –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.' + '\n\n' +
							'–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.'
			}

			if (!ctx.session.message_id){
				const { message_id } = await ctx.replyWithHTML(
					text,
					{
				        reply_markup: {
								one_time_keyboard: true,
								inline_keyboard: [
									[
										{text:'üí≤–¢–∞—Ä–∏—Ñ—ã',callback_data: 'subpay'}],
									    [{text:'–ù–∞–∑–∞–¥',callback_data: 'main menu'}],
								    ]
								
						},
				        disable_web_page_preview: true,
				        parse_mode: 'HTML'
	    			})

				ctx.session.message_id = message_id
			} else { 
				const { message_id } = await ctx.telegram.editMessageText(
					ctx.chat.id,
		            ctx.session.message_id,
		            0,
					text,
					{
				        reply_markup: {
								one_time_keyboard: true,
								inline_keyboard: [
									[
										{text:'üí≤–¢–∞—Ä–∏—Ñ—ã',callback_data: 'subpay'}],
									    [{text:'–ù–∞–∑–∞–¥',callback_data: 'main menu'}],
								    ]
								
						},
				        disable_web_page_preview: true,
				        parse_mode: 'HTML'
	    			})

				ctx.session.message_id = message_id
			}

		})
		return sub;
	}

	remoteQuestions(){
		const q = new Scenes.BaseScene('questions');

		q.enter(async ctx => {
			let text =  '‚öôÔ∏è–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º:' + '\n' +
						'@KO_PriorityHelper_Bot'

			if (!ctx.session.message_id){
				const { message_id } = await ctx.replyWithHTML(
					text,
					{
				        reply_markup: {
								one_time_keyboard: true,
								inline_keyboard: [
									[
									    {text:'–ù–∞–∑–∞–¥',callback_data: 'main menu'}],
								    ]
						},
				        disable_web_page_preview: true,
				        parse_mode: 'HTML'
	    			})

				ctx.session.message_id = message_id
			} else {
				const { message_id } = await ctx.telegram.editMessageText(
					ctx.chat.id,
		            ctx.session.message_id,
		            0,

					text,
					{
				        reply_markup: {
								one_time_keyboard: true,
								inline_keyboard: [
									[
									    {text:'–ù–∞–∑–∞–¥',callback_data: 'main menu'}],
								    ]
						},
				        disable_web_page_preview: true,
				        parse_mode: 'HTML'
	    			})

				ctx.session.message_id = message_id
			}

		})
		return q;
	}


	infoAbout(){
		const info = new Scenes.BaseScene('info');

		info.enter(async ctx => {
			let text =  'üü¢ –° –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–∞ –í–∞–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ (–±–ª–∞–≥–æ–¥–∞—Ä—è –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–µ, –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏) –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∏–¥–µ–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã —Å—Ä–∞–∑—É –∏–∑ 20+ –∫–∞–Ω–∞–ª–æ–≤' +'\n\n' +
						'‚ÑπÔ∏è–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Ç—É—Ç: https://teletype.in/@ko_priority/list' +'\n\n' +
						'¬©Ô∏è–ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—â–µ–º –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —É —Å–µ–±—è –≤ –ø–æ–¥–±–æ—Ä–∫–µ –ª—É—á—à–∏—Ö –∏–∑ –ª—É—á—à–∏—Ö, —É–¥–∞–ª—è—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω'

			if (!ctx.session.message_id){
				const { message_id } = await ctx.replyWithHTML(
					text,
					{
				        reply_markup: {
								one_time_keyboard: true,
								inline_keyboard: [
									[
									    {text:'–ù–∞–∑–∞–¥',callback_data: 'main menu'}],
								    ]
						},
				        disable_web_page_preview: true,
				        parse_mode: 'HTML'
	    			})

				ctx.session.message_id = message_id
			} else {
				const { message_id } = await ctx.telegram.editMessageText(
					ctx.chat.id,
		            ctx.session.message_id,
		            0,
					text,
					{
				        reply_markup: {
								one_time_keyboard: true,
								inline_keyboard: [
									[
									    {text:'–ù–∞–∑–∞–¥',callback_data: 'main menu'}],
								    ]
						},
				        disable_web_page_preview: true,
				        parse_mode: 'HTML'
	    			})
			}

		})
		return info;
	}

	AcceptTheSub(){
		const acc = new Scenes.BaseScene('acception');

		acc.enter(async ctx => {
			await ctx.replyWithHTML('<b>–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>')
		})

		acc.on('text', async ctx => {


			try{

				await User.query().findById(ctx.message.text).patch({
					status : true,
				})

				await ctx.telegram.sendMessage(ctx.message.text, '‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞', {
					disable_web_page_preview: true,
					parse_mode: 'HTML'
				})
			} catch { 
				await ctx.replyWithHTML('<b>–ù–µ–≤–µ—Ä–Ω—ã–π id</b>')
			}
			let date = new Date()
			await User.query().findById(ctx.message.text).patch({
				date : String(date.getFullYear()) + '-' + '0'+ String(date.getMonth()+1) + '-' + String(date.getDate()),
				duration : ctx.session.durationsub,
			})

			await ctx.scene.leave() 
		})



		return acc;

	}

	ReSendAction(){

		const messages = new Scenes.BaseScene('q1f8y');
		let userData;

		messages.enter( async ctx => {
			await ctx.replyWithHTML('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏')
		})

		messages.on('text', async ctx => {
			ctx.session.messageId = ctx.message.message_id
			const userData = await User.query().returning('*')
			for (let item in userData){
				let dat = new Date()
				dat = String(dat.getFullYear()) + '-' + '0'+String(dat.getMonth()+1) + '-' + String(dat.getDate())
				if (new Date(userData[item].date) - new Date(dat) > 24*60*60*1000*userData[item].duration*10){
					ctx.telegram.sendMessage(userData[item].id,
						'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.'
						)
				} else {
			        ctx.telegram.copyMessage(
			        	userData[item].id,
			        	ctx.chat.id,
			        	ctx.session.messageId
					)
				}
			}
			await ctx.scene.leave()
 
		});


		messages.on('photo', async ctx => {
			ctx.session.messageId = ctx.message.message_id
			const userData = await User.query().returning('*')
			for (let item in userData){
				let dat = new Date()
				dat = String(dat.getFullYear()) + '-' + '0'+String(dat.getMonth()+1) + '-' + String(dat.getDate())
				if (new Date(userData[item].date) - new Date(dat) > 24*60*60*1000*userData[item].duration){
					ctx.telegram.sendMessage(userData[item].id,
						'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.'
						)
				} else {
			        ctx.telegram.copyMessage(
			        	userData[item].id,
			        	ctx.chat.id,
			        	ctx.session.messageId
					)
				}
			}

			await ctx.scene.leave()
 
		})


    return messages
    }
}
